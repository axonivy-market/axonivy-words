{
  "$schema" : "https://json-schema.axonivy.com/process/12.0.0/process.json",
  "id" : "198EFF0EFE175EBA",
  "kind" : "CALLABLE_SUB",
  "config" : {
    "data" : "com.axonivy.utils.axon.ivy.word.previewDocumentDataData"
  },
  "elements" : [ {
      "id" : "f3",
      "type" : "CallSubStart",
      "name" : "previewDocument(File)",
      "config" : {
        "signature" : "previewDocument",
        "input" : {
          "params" : [
            { "name" : "file", "type" : "java.io.File", "desc" : "" }
          ],
          "map" : {
            "out.file" : "param.file"
          }
        },
        "result" : {
          "params" : [
            { "name" : "streamedContent", "type" : "org.primefaces.model.StreamedContent", "desc" : "" }
          ],
          "map" : {
            "result.streamedContent" : "in.streamedContent"
          }
        }
      },
      "visual" : {
        "at" : { "x" : 648, "y" : 552 },
        "labelOffset" : { "x" : 17, "y" : 33 },
        "description" : [
          "This function receives a DocumentPreview entity and returns the value as a StreamedContent type.",
          "",
          "This function currently supports the following types: .eml, .xlsx, .doc, .jpg/.png, .xls, .doc, .docx."
        ],
        "icon" : "res:/webContent/icons/doc-factory-logo.png?small"
      },
      "connect" : [
        { "id" : "f7", "to" : "f4" }
      ]
    }, {
      "id" : "f5",
      "type" : "ProcessAnnotation",
      "name" : [
        "This function receives a java.io.File and returns the value as a StreamedContent.",
        "",
        "This function currently supports the following types: .docx."
      ],
      "visual" : {
        "at" : { "x" : 832, "y" : 624 },
        "size" : { "width" : 512 },
        "description" : [
          "The feature accepts a java.io.File object as input. It can parse and process the file content based on its type.",
          "",
          "This callable currently supports the following types: .docx.",
          "",
          "It will convert these file types to PDF format and return a streamedContent. We can use the <p:media> tag to display this value."
        ]
      }
    }, {
      "id" : "f4",
      "type" : "Script",
      "name" : "Generate StreamedContent to display",
      "config" : {
        "output" : {
          "code" : [
            "import com.axonivy.utils.word.service.preview.DocumentPreviewService;",
            "out.streamedContent = DocumentPreviewService.getInstance().generateStreamedContent(in.file);"
          ]
        }
      },
      "visual" : {
        "at" : { "x" : 824, "y" : 552 }
      },
      "connect" : [
        { "id" : "f8", "to" : "f6" }
      ]
    }, {
      "id" : "f6",
      "type" : "CallSubEnd",
      "visual" : {
        "at" : { "x" : 968, "y" : 552 },
        "icon" : "res:/webContent/icons/doc-factory-logo.png?small"
      }
    } ]
}